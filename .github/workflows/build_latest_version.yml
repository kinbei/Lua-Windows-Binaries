name: Build

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'
  
jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install lxml requests

    - name: Extract Lua Version
      id: extract_lua_version
      shell: bash
      run: |
        package_name=$(python - <<EOF
        import requests
        import sys
        import os
        from lxml import html
        from requests.exceptions import RequestException
        
        response = None
        try:
            response = requests.get("https://www.lua.org/ftp/")
        except RequestException as e:
            output_file = os.getenv('GITHUB_OUTPUT')
            with open(output_file, "a") as file:
                file.write("STATUS=failure\n")
                file.write("ERRMSG=Request failed with error {}\n".format(str(e)))
            sys.exit(0)
        
        if response and response.status_code == 200:
            html_content = response.text
            output_file = os.getenv('GITHUB_OUTPUT')
            tree = html.fromstring(html_content)
            td_element = tree.xpath("/html/body/table[1]/tr[2]/td[1]/a")
    
            if td_element:
                package_name = td_element[0].text_content().strip()
                version = os.path.basename(package_name).replace(".tar.gz", "")
                with open(output_file, "a") as file:
                    file.write("LUA_PACKAGE_NAME={}\n".format(package_name))
                    file.write("LUA_VERSION={}\n".format(version))
                    file.write("STATUS=success\n")
            else:
                with open(output_file, "a") as file:
                    file.write("STATUS=failure\n")
                    file.write("ERRMSG=No package found\n")
        else:
            output_file = os.getenv('GITHUB_OUTPUT')
            with open(output_file, "a") as file:
                file.write("STATUS=failure\n")
                file.write("ERRMSG=Request failed with status code {}\n".format(response.status_code))
        EOF
        )

    - name: Check on failures
      if: steps.extract_lua_version.outputs.STATUS == 'failure'
      run: |
        echo @"
        Unable to find Lua version: ${{ steps.extract_lua_version.outputs.ERRMSG }}
        "@
        exit 1

    - name: Download Lua
      uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9 # 1.6.0
      with:
        url: "http://www.lua.org/ftp/${{ steps.extract_lua_version.outputs.LUA_PACKAGE_NAME }}"
        target: .
          
    - name: Make
      run: |
        tar zxf "${{ steps.extract_lua_version.outputs.LUA_PACKAGE_NAME }}"
        cd "${{ steps.extract_lua_version.outputs.LUA_VERSION }}"
        make generic

    - name: Zip
      run: |
        Compress-Archive -Path ${{ steps.extract_lua_version.outputs.LUA_VERSION }}/src/lua.exe -Destination Lua.zip

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.ACTIONS_REMOTE_BUILD_TOKEN }}
        file: Lua.zip
        asset_name: Lua.zip
        tag: ${{ steps.extract_lua_version.outputs.LUA_VERSION }}
        overwrite: true
        body: "Lua.exe"

    - name: Get latest release info
      id: get_latest_release_info
      shell: bash
      run: |
        python - <<EOF
        import requests
        import os
        response = requests.get("https://api.github.com/repos/kinbei/Lua-Windows-Binaries/releases/latest")
        data = response.json()
        download_url = data['assets'][0]['browser_download_url']
        output_file = os.getenv('GITHUB_OUTPUT')
        with open(output_file, "a") as file:
            file.write(f"DOWNLOAD_URL={download_url}\n")
        EOF

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.ACTIONS_REMOTE_BUILD_TOKEN }}

    - name: Update README
      shell: bash
      run: |
        python - <<EOF
        import requests
        import os
        response = requests.get("https://api.github.com/repos/kinbei/Lua-Windows-Binaries/releases/latest")
        data = response.json()
        download_url = data['assets'][0]['browser_download_url']
        output_file = os.getenv('GITHUB_WORKSPACE') + "/README.md"
        with open(output_file, "r+") as file:
            lines = file.readlines()
            if len(lines) >= 3:
                lines[2] = f"[![badge](https://img.shields.io/github/downloads/kinbei/Lua-Windows-Binaries/total?style=flat-square&logo=GitHub)]({download_url})\n"
                file.seek(0)
                file.writelines(lines)
            else:
                print(f"Not enough lines, Number of lines: {len(lines)}")
        EOF

    - name: Import GPG key
      id: import-gpg
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Commit changes
      run: |
        git config --local user.email "kinbei@qq.com"
        git config --local user.name "kinbei"
        git add README.md
        git commit -m "Update README.md with latest release"
        git push
